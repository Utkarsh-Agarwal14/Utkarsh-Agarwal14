/*
A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.

The path sum of a path is the sum of the node's values in the path.

Given the root of a binary tree, return the maximum path sum of any non-empty path.

 // approach


For each node there can be four ways that the max path goes through the node: 

-> Node only 
-> Max path through Left Child + Node 
-> Max path through Right Child + Node 
-> Max path through Left Child + Node + Max path through Right Child
max from al these four is taken and to track max a global variable made;
*/
//code




// Definition for a binary tree node.
 public class TreeNode {
     int val;
     TreeNode left;
     TreeNode right;
     TreeNode() {}
     TreeNode(int val) { this.val = val; }
     TreeNode(int val, TreeNode left, TreeNode right) {
         this.val = val;
         this.left = left;
         this.right = right;
     }
 }

class Solution {
    public int maxPathSum(TreeNode root) {
        ans=Integer.MIN_VALUE;
        helper(root);
        return ans;
    }
    public static int ans;// to keep track of max

    public int helper(TreeNode root){
        if(root == null){
            return 0;
        }
        int left=helper(root.left);
        int right=helper(root.right);
        int single=Math.max(Math.max(left,right)+root.val,root.val);//-> Node only 
                                                                    //-> Max path through Left Child + Node 
                                                                    //-> Max path through Right Child + Node 
        int max=Math.max(single,left+right+root.val);  //-> Max path through Left Child + Node + Max path through Right Child.
        ans=Math.max(ans,max);//  update max
        return single;     // return the max sum obtain from that single path not by both left and right child.
    }

}
