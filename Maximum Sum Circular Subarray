//help of kadanes algo





class Solution {
    public int maxSubarraySumCircular(int[] nums) {
  // we find maxsubarray sum with the help of kadane algo its normal algo to find maax_subarray sum;
    int max_subarray_sum=kadane(nums);

        int totalsum=0;
        for(int i=0;i<nums.length;i++){
            totalsum+=nums[i];
            nums[i]=nums[i]*-1;

        }
// to find min subarray sum we use inversion of every element in above loop and then finding max and inverted it gives min subarray sum;
        int min_subarray_sum=-1 * kadane(nums);
  // if all the elements in the array is negative where total sum and min sub array sum is equal we directly return max subarray sum which ids smallest negative integer in this case;
        if(totalsum == min_subarray_sum){
            return max_subarray_sum;
        }
        return Math.max(max_subarray_sum,totalsum-min_subarray_sum);
// may be the max sub array sum is greater than the circular sub array sum so we return the maximum of both;
// max circular subarray sum= total sum -min subarraysum (learn it);
    }
// normal kadanes algorithm
    public int kadane(int nums[]){

        int max_so_far=Integer.MIN_VALUE;
        int max_in_end=0;
        
        for(int i=0;i<nums.length;i++){
        max_in_end+=nums[i];
        if(max_in_end > max_so_far){
            max_so_far=max_in_end;
        }    
        if(max_in_end < 0){
            max_in_end=0;
        }

        }
        return max_so_far;
    }
}
