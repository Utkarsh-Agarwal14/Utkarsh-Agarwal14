/*
Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

Clarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.
*/
//code
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    
    public String serialize(TreeNode root) {
       if(root == null){
           return "";
       }
       StringBuilder s=new StringBuilder();
       build(s,root);
       return s.toString();
        
    }
    public void build(StringBuilder s,TreeNode root){
        if(root == null){
            s.append(",");
            s.append("N");
            return;
        }

        if(s.length() == 0){
            s.append(Integer.toString(root.val));
        }else{
            s.append(","+Integer.toString(root.val));
        }
        build(s,root.left);
        build(s,root.right);
    }
    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
       if(data.length() == 0){
           return null;
       }
       String arr[]=data.split(",");
      
        return dec(arr,arr.length);
    }
    int cnt=0;
    public TreeNode dec(String arr[],int n){
        if(cnt >= n || arr[cnt].equals("N") ){
            cnt++;
            return null;
        }
        TreeNode root=new TreeNode(Integer.parseInt(arr[cnt]));
        cnt++;
        root.left=dec(arr,n);
        root.right=dec(arr,n);
    return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));
