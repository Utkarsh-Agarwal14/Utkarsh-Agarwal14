/*
Given an integer array nums, return the number of longest increasing subsequences.

Notice that the sequence has to be strictly increasing.

 

Example 1:

Input: nums = [1,3,5,4,7]
Output: 2
Explanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].
*/
//code
class Solution {
    public int findNumberOfLIS(int[] nums) {
        int n=nums.length;

        int dp[]=new int[n];
        int count[]=new int[n];
        int max=1;
        for(int i=0;i<n;i++){
            dp[i]=1;
            count[i]=1;
            for(int j=0;j<i;j++){
                if(nums[j] < nums[i] && dp[j]+1 > dp[i]){
                    dp[i]=1+dp[j];
                    count[i]=count[j];
                }else if(nums[j] < nums[i] && dp[j]+1 == dp[i]){
                    count[i]+=count[j];
                }
            }
        max=Math.max(max,dp[i]);
        }
        int ans=0;
        for(int i=0;i<n;i++){
            if(dp[i] == max){
                ans+=count[i];
            }
        }
    return ans;
    }
}
