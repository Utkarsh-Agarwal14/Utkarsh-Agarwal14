/*

Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.



for n=3-->
Preorder traversals of all constructed BSTs are 
1 2 3 
1 3 2 
2 1 3 
3 1 2 
3 2 1 
*/
//code

//Definition for a binary tree node.
  public class TreeNode {
      int val;
      TreeNode left;
      TreeNode right;
      TreeNode() {}
      TreeNode(int val) { this.val = val; }
      TreeNode(int val, TreeNode left, TreeNode right) {
          this.val = val;
          this.left = left;
          this.right = right;
      }
  }
 
class Solution {
    public List<TreeNode> generateTrees(int n) {
        return helper(1,n);
    }
    public List<TreeNode> helper(int start,int end){
        List<TreeNode> list=new ArrayList<>();
        if( start > end ){
            list.add(null);
            return list;
        }
        for(int i=start;i<=end;i++){
            List<TreeNode> leftSubtree=helper(start,i-1);// leftsubtree list will collect all possible leftsubtrees form 1 to i-1.
            List<TreeNode> rightSubtree=helper(i+1,end);// // rightsubtrees list will collect all possible rightsubtrees form i+1 to n.
            for(int j=0;j<leftSubtree.size();j++){
                TreeNode left=leftSubtree.get(j);// iteration to all possible combinations of left and right subtree in arraylist.
                for(int k=0;k<rightSubtree.size();k++){
                    TreeNode right=rightSubtree.get(k);
                    TreeNode root=new TreeNode(i);// creation of root node which eill equal to i value.
                    root.left=left;// adding left subtree.
                    root.right=right;//adding right sub tree.
                    list.add(root);
                }
            }
        }
        return list;// return af all node for n nodes.
    }
}
